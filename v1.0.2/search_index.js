var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SodShockTube","category":"page"},{"location":"#SodShockTube","page":"Home","title":"SodShockTube","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SodShockTube.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SodShockTube]","category":"page"},{"location":"#SodShockTube.ShockTubeProblem","page":"Home","title":"SodShockTube.ShockTubeProblem","text":"ShockTubeProblem\n\nContains the parameters of a shock tube problem\n\nFields\n\ngeometry::Tuple{Float64, Float64, Float64} Contains the locations of the (left edge, right edge, initial shock location)\n\nleft_state Completely specified thermodynamic state of the left side of the discontinuity (NamedTuple of p, ρ, u)\n\nright_state Completely specified thermodynamic state of the right side of the discontinuity (NamedTuple of p, ρ, u)\n\nt::Float64 The time at which the shock tube problem will be solved\n\nγ::Float64 The heat capacity ratio of the gas in the shock tube\n\n\n\n\n\n","category":"type"},{"location":"#SodShockTube.solve-Tuple{ShockTubeProblem, Any}","page":"Home","title":"SodShockTube.solve","text":"solve(s::ShockTubeProblem, x_arr)\n\nSolve the given shock tube problem at the provided x locations.\n\nReturns\n\npositions: A Dictionary which maps descriptive names of the regions to x coordinates\n\nregions: A Dictionary which maps regions (\"Region 1\", \"Region 2\", etc) to thermodynamic states (ρ, p, u) in the shock tube solution\n\nvalues: A NamedTuple (;x, ρ, p, e) containing the x coordinates, the density, pressure, and stagnation energy, respectively\n\nExample\n\n```jldoctest;setup = :(using SodShockTube) julia> problem = ShockTubeProblem(     geometry = (0.0, 1.0, 0.5),     leftstate = (ρ = 1.0, u = 0.0, p = 1.0),     rightstate = (ρ = 0.125, u = 0.0, p = 0.1),     t = 0.1,     γ = 1.4 );\n\njulia> xs = LinRange(0.0, 1.0, 500);\n\njulia> positions, regions, values = solve(problem, xs);\n\njulia> positions Dict{String, Float64} with 4 entries:   \"Shock\"                 => 0.850431   \"Foot of rarefaction\"   => 0.485945   \"Head of rarefaction\"   => 0.263357   \"Contact Discontinuity\" => 0.685491\n\njulia> regions Dict{String, Any} with 5 entries:   \"Region 5\" => (0.1, 0.125, 0.0)   \"Region 1\" => (1.0, 1.0, 0.0)   \"Region 4\" => (0.30313, 0.265574, 0.927453)   \"Region 3\" => (0.30313, 0.426319, 0.927453)   \"Region 2\" => \"RAREFACTION\"\n\n\n\n\n\n","category":"method"}]
}
